# -*- coding: utf-8 -*-
"""RF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HUm9dbPT32nGdvDvhjPdnEOna_KIlts8
"""


import json
import numpy as np
import rasterio
from rasterio.features import geometry_mask
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from shapely.geometry import shape

# import json
# import numpy as np
# import rasterio
# from rasterio.plot import show
# import matplotlib.pyplot as plt



# Load the labeled data from the JSON file
json_file_path = 'tiffile/labeled_data.geojson'
with open(json_file_path) as f:
    labeled_data = json.load(f)

# Load the TIFF image
tiff_file_path = 'tiffile/Extract_tif11.tif'
with rasterio.open(tiff_file_path) as src:
    tiff_image = src.read()
    profile = src.profile

# Prepare training data from labeled data
train_features = []
train_labels = []

for feature in labeled_data['features']:
    properties = feature['properties']
    print(properties)
    
    if 'Classvalue' in properties:
        class_value = properties['Classvalue']
    else:
        print("Key 'Classvalue' not found in properties")
        continue
    
    geom = shape(feature['geometry'])

    # Create a mask for the current geometry
    mask = geometry_mask([geom], transform=src.transform, invert=True, out_shape=(src.height, src.width))

    # Debugging: print mask summary
    print(f"Class {class_value}, Pixels: {np.sum(mask)}")

    coords = np.column_stack(np.where(mask))

    for coord in coords:
        train_features.append([tiff_image[0][coord[0], coord[1]], tiff_image[1][coord[0], coord[1]], tiff_image[2][coord[0], coord[1]]])
        train_labels.append(class_value)

coords

coords[:5][:]

# print(train_labels.shape)

print(train_features)

# Convert to numpy arrays
train_features = np.array(train_features)
train_labels = np.array(train_labels)

# Debugging: print shapes of train_features and train_labels
print("Training features shape:", train_features.shape)
print("Training labels shape:", train_labels.shape)

# Check if train_features and train_labels are populated
if train_features.size == 0 or train_labels.size == 0:
    raise ValueError("Training features or labels are empty. Check the labeled data and the TIFF image.")

# Convert to numpy arrays
train_features = np.array(train_features)
train_labels = np.array(train_labels)

# Train the Random Forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(train_features, train_labels)

# Prepare the entire image data for prediction
image_features = np.stack([tiff_image[0].ravel(), tiff_image[1].ravel(), tiff_image[2].ravel()], axis=1)

# Classify the image
predicted_labels = clf.predict(image_features)

# # Save the classified image
# classified_tiff_path = '/mnt/data/Classified_Extract1_tif11.tif'
# profile.update(dtype=rasterio.uint8, count=1)
# with rasterio.open(classified_tiff_path, 'w', **profile) as dst:
#     dst.write(classified_image, 1)

# Display the classified image
plt.imshow(classified_image, cmap='tab20')
plt.colorbar()
plt.title('Classified Image')
plt.show()